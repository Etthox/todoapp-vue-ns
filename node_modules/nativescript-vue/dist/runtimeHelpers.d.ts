import { View } from '@nativescript/core';
import { App, Component, RendererElement, RendererNode, VNode, VNodeProps } from '@vue/runtime-core';
import { NSVNode } from './dom';
export declare const setRootApp: (app: App) => void;
export type ContextOverrides = {
    reload?(): void;
};
export type CreateNativeViewProps<P> = Partial<P & VNodeProps & Record<string, any>>;
export declare function createNativeView<T = View, P = any>(component: Component<P>, props?: CreateNativeViewProps<P>, contextOverrides?: ContextOverrides): {
    context: {
        reload?(): void;
        config: import("@vue/runtime-core").AppConfig;
        mixins: import("@vue/runtime-core").ComponentOptions<{}, any, any, any, any, any, any, any, any>[];
        components: Record<string, Component<any, any, any, import("@vue/runtime-core").ComputedOptions, import("@vue/runtime-core").MethodOptions, {}, any>>;
        directives: Record<string, import("@vue/runtime-core").Directive<any, any>>;
        provides: Record<string | symbol, any>;
    };
    readonly vnode: VNode<RendererNode, RendererElement, {
        [key: string]: any;
    }>;
    readonly nativeView: T;
    mount(root?: NSVNode): VNode<RendererNode, RendererElement, {
        nativeView: T;
    }>;
    unmount(): void;
};
export declare const ELEMENT_REF: unique symbol;
export declare const isOn: (key: string) => boolean;
export declare const isAndroidKey: (key: string) => boolean;
export declare const isIOSKey: (key: string) => boolean;
export declare const isBoolean: (value: unknown) => boolean;

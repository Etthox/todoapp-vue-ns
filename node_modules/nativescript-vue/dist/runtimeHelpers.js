import { NSVRoot } from './dom';
import { renderer } from './renderer';
let rootApp = null;
export const setRootApp = (app) => {
    rootApp = app;
};
export function createNativeView(component, props, contextOverrides) {
    let isMounted = false;
    let vm;
    const newApp = renderer.createApp(component, props);
    // Destructure so as not to copy over the root app instance
    const { app, ...rootContext } = rootApp._context;
    const context = { ...rootContext, ...contextOverrides };
    return {
        context,
        get vnode() {
            return vm?.$.vnode;
        },
        get nativeView() {
            return this.vnode?.el.nativeView;
        },
        mount(root = new NSVRoot()) {
            if (isMounted) {
                return this.vnode;
            }
            Object.keys(context).forEach((key) => {
                newApp._context[key] = context[key];
            });
            vm = newApp.mount(root);
            isMounted = true;
            return this.vnode;
        },
        unmount() {
            if (!isMounted)
                return;
            vm = null;
            newApp.unmount();
            isMounted = false;
        },
    };
}
export const ELEMENT_REF = Symbol(__DEV__ ? `elementRef` : ``);
const onRE = /^on.+/;
export const isOn = (key) => onRE.test(key);
export const isAndroidKey = (key) => key.startsWith('android:');
export const isIOSKey = (key) => key.startsWith('ios:');
export const isBoolean = (value) => {
    return typeof value === 'boolean' || value instanceof Boolean;
};
//# sourceMappingURL=runtimeHelpers.js.map
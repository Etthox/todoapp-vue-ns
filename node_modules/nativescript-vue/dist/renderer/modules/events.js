import { callWithAsyncErrorHandling, } from '@vue/runtime-core';
export function addEventListener(el, event, handler, options = {}) {
    el.addEventListener(event, handler, options);
}
export function removeEventListener(el, event, handler, options = {}) {
    el.removeEventListener(event, handler);
}
export function patchEvent(el, rawName, prevValue, nextValue, instance = null) {
    // vei = vue event invokers
    const invokers = el._vei || (el._vei = {});
    const existingInvoker = invokers[rawName];
    if (nextValue && existingInvoker) {
        // patch
        existingInvoker.value = nextValue;
    }
    else {
        const [name, options] = parseName(rawName);
        if (nextValue) {
            // add
            const invoker = (invokers[rawName] = createInvoker(nextValue, instance));
            addEventListener(el, name, invoker, options);
        }
        else if (existingInvoker) {
            // remove
            removeEventListener(el, name, existingInvoker, options);
            invokers[rawName] = undefined;
        }
    }
}
const optionsModifierRE = /(?:Once|Capture)$/;
function parseName(name) {
    let options;
    if (optionsModifierRE.test(name)) {
        options = {};
        let m;
        while ((m = name.match(optionsModifierRE))) {
            name = name.slice(0, name.length - m[0].length);
            options[m[0].toLowerCase()] = true;
            options;
        }
    }
    // todo: optimise if necessary
    // this isn't technically perfect,
    // since if the event name was UPPER then we'll convert it to uPPER
    // but for the majority of cases, this should be the right thing to do.
    name = name.slice(name.startsWith('on:') ? 3 : 2);
    name = name.charAt(0).toLowerCase() + name.slice(1);
    // return event name by removing on prefix. eg. onitemTap -> itemTap
    return [name, options];
    // return [hyphenate(name.slice(2)), options]
}
function createInvoker(initialValue, instance) {
    const invoker = (e) => {
        callWithAsyncErrorHandling(invoker.value, instance, 5, [e]);
    };
    invoker.value = initialValue;
    return invoker;
}
//# sourceMappingURL=events.js.map
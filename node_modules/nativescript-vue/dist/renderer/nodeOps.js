import { NSVComment, NSVElement, NSVText } from '../dom';
export function insert(el, parent, anchor) {
    // console.log("insert", el, parent.tagName, anchor);
    if (anchor !== null) {
        // console.log('insert before!')
        parent.insertBefore(el, anchor);
    }
    else {
        parent.appendChild(el);
    }
}
export function remove(el) {
    if (el.parentNode != null) {
        el.parentNode.removeChild(el);
    }
}
export function createElement(type, namespace, isCustomizedBuiltIn, vnodeProps) {
    // console.log("createElement", type);
    return new NSVElement(type);
}
export function createText(text) {
    // console.log("createText");
    return new NSVText(text);
}
export function createComment(text) {
    // console.log("createComment");
    return new NSVComment(text);
}
export function setText(node, text) {
    // console.log("set text", node, text);
    node.text = text;
}
export function setElementText(node, text) {
    // console.log("set element text", node, text);
    node.text = text;
}
export function parentNode(node) {
    // console.log("parentNode?", node.nodeType);
    return node.parentNode;
}
export function nextSibling(node) {
    return node.nextSibling;
}
export function cloneNode(node) {
    console.log('CLONE NODE');
    return node;
}
export function insertStaticContent(content, parent, anchor, namespace, start, end) {
    console.log('insert static content - not implemented.');
    return [undefined, undefined];
}
export function setScopeId(el, scopeId) {
    el.setAttribute(scopeId, '');
}
export const nodeOps = {
    insert,
    remove,
    createElement,
    createText,
    createComment,
    setText,
    setElementText,
    parentNode,
    nextSibling,
    cloneNode,
    insertStaticContent,
    setScopeId,
    //   querySelector,
};
//# sourceMappingURL=nodeOps.js.map
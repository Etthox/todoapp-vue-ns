import { Application, View, } from '@nativescript/core';
import { unref, warn, } from '@vue/runtime-core';
import { isObject } from '@vue/shared';
import { NSVElement, NSVRoot } from '../dom';
import { createNativeView } from '../runtimeHelpers';
/**
 * @internal
 */
export function install(app) {
    app.config.globalProperties.$showModal = $showModal;
}
function resolveModalTarget(target) {
    const ob = unref(target);
    if (ob instanceof NSVElement) {
        return ob.nativeView;
    }
    else if (ob instanceof View) {
        return ob;
    }
    else if (isObject(ob) && isObject(ob.$el)) {
        return ob.$el.nativeView;
    }
    return false;
}
export async function $showModal(component, options = {}) {
    const modalTarget = resolveModalTarget(options.target ?? Application.getRootView());
    if (!modalTarget) {
        if (__DEV__) {
            warn(`could not open modal because the target does not exist`);
        }
        return;
    }
    return new Promise((resolve) => {
        let isResolved = false;
        let isReloading = false;
        let root = new NSVRoot();
        const reloadModal = () => {
            isReloading = true;
            closeModal();
            // reopening is done in `closeCallback`
        };
        let view = createNativeView(component, options.props, {
            reload: reloadModal,
        });
        const closeCallback = (data, ...args) => {
            if (isResolved)
                return;
            if (isReloading) {
                view.unmount();
                view.mount(root);
                openModal({
                // todo: for this to work nicely, we'd need to add `animated: false` to `closeModal` as well
                // but not currently possible without a core change.
                // animated: false,
                });
                isReloading = false;
                return;
            }
            isResolved = true;
            view.unmount();
            view = null;
            // call the closeCallback if it exists with all arguments
            options.closeCallback?.(data, ...args);
            // resolve the promise with the first argument, since Promise.resolve() expects only one argument
            resolve(data);
        };
        const openModal = (additionalOptions) => {
            modalTarget.showModal(view.nativeView, {
                ...options,
                context: null,
                closeCallback,
                ...additionalOptions,
            });
        };
        const closeModal = (...args) => {
            view.nativeView?.closeModal(...args);
        };
        // clone the config and globalProperties to avoid mutating the root app's config/globalProperties
        const context = view.context;
        context.config = Object.assign({}, context.config);
        context.config.globalProperties = Object.assign({}, context.config.globalProperties, {
            $closeModal: closeModal,
            $modal: { close: closeModal },
        });
        view.mount(root);
        openModal();
    });
}
//# sourceMappingURL=modals.js.map
import { NSVViewMeta } from '../registry';
export declare const enum NSVNodeTypes {
    TEXT = "text",
    ELEMENT = "element",
    COMMENT = "comment",
    ROOT = "root"
}
export declare const enum NSVViewFlags {
    NONE = 0,
    SKIP_ADD_TO_DOM = 1,
    CONTENT_VIEW = 2,
    LAYOUT_VIEW = 4,
    NO_CHILDREN = 8
}
export declare abstract class NSVNode {
    protected constructor(nodeType: NSVNodeTypes);
    nodeId: number;
    nodeType: NSVNodeTypes;
    private _text?;
    get text(): string | undefined;
    set text(value: string | undefined);
    parentNode: NSVElement | null;
    childNodes: NSVNode[];
    get nextSibling(): NSVNode | null;
    get prevSibling(): NSVNode | null;
    get firstChild(): NSVNode;
    get lastChild(): NSVNode;
}
export declare class NSVElement extends NSVNode {
    private readonly _tagName;
    private readonly _nativeView;
    private _meta;
    private _attributeOriginalValue;
    constructor(tagName: string);
    get tagName(): string;
    get nativeView(): any;
    get style(): any | string;
    set style(inlineStyle: any | string);
    get text(): string | undefined;
    set text(t: string | undefined);
    get meta(): NSVViewMeta;
    addEventListener(event: string, handler: any, options?: AddEventListenerOptions): void;
    removeEventListener(event: string, handler?: any): void;
    dispatchEvent(event: string): void;
    getAttribute(name: string): unknown;
    setAttribute(name: string, value: unknown): void;
    removeAttribute(name: string): void;
    insertBefore(el: NSVNode, anchor?: NSVNode | null): void;
    appendChild(el: NSVNode): void;
    removeChild(el: NSVNode): void;
    private addChild;
    updateText(): void;
}
export declare class NSVComment extends NSVNode {
    constructor(text: string);
}
export declare class NSVText extends NSVNode {
    constructor(text: string);
}
export declare class NSVRoot extends NSVNode {
    el?: NSVElement;
    constructor();
    appendChild(el: NSVNode): void;
    removeChild(el: NSVNode): void;
    insertBefore(el: NSVNode, anchor?: NSVNode | null): void;
}

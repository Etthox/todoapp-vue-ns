import type { CreateAppFunction } from '@vue/runtime-core';
import { createBlock as createBlockCore, createElementBlock as createElementBlockCore, createElementVNode as createElementVNodeCore, createVNode as createVNodeCore } from '@vue/runtime-core';
import { NSVElement, NSVRoot } from './dom';
import { registerElement } from './registry';
declare module '@vue/runtime-core' {
    interface App {
        start(): ComponentPublicInstance | undefined;
        mount(rootContainer?: NSVRoot | string, isHydrate?: boolean, isSVG?: boolean): ComponentPublicInstance;
        registerElement: typeof registerElement;
    }
}
export * from './dom';
export * from './registry';
export * from './renderer';
export * from './components';
export { ELEMENT_REF, createNativeView } from './runtimeHelpers';
export * from '@vue/runtime-core';
export { vShow } from './directives/vShow';
export { $showModal } from './plugins/modals';
export { $navigateTo, $navigateBack } from './plugins/navigation';
export declare const render: import("@vue/runtime-core").RootRenderFunction<import("@vue/runtime-core").RendererElement>;
export declare const createApp: CreateAppFunction<NSVElement>;
export declare function resolveComponent(name: string, maybeSelReference: boolean): any;
export declare const createBlock: typeof createBlockCore;
export declare const createElementBlock: typeof createElementBlockCore;
export declare const createElementVNode: typeof createElementVNodeCore;
export declare const createVNode: typeof createVNodeCore;
